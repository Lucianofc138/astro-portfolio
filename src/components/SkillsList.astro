---
interface Skill {
    type: string;
    keywords: string[];
    name: string;
}
interface Props {
    skills: Skill[];
}

const { skills= [] } = Astro.props;
---
<main>
    <label for="filter-text-input"/>
    <input
            id="filter-text-input"
            type="text"
            placeholder="Filter skills"
    />
    <ul>
        {skills.map((skill) => (
                <li class="skill-item" data-skill-type={skill.type} data-title={skill.name} data-keywords={skill.keywords}>
                    {skill.name}
                </li>
        ))}
    </ul>
</main>
<script>
    function handleFilter(event: Event): void {
        const input: string = (event?.target as HTMLInputElement)?.value ?? "";
        console.log("handle filter:", input);

        const skillItems: NodeListOf<Element> = document.querySelectorAll(".data-skill-item");
        // console.log("SKILLS ITEMS: ", skillItems);
        skillItems.forEach((item: Element): void => {
            const keywords: string[] = item?.getAttribute("data-keywords")?.split(",") ?? [];
            const shouldHighlight = keywords.some(kw => input.includes(kw));

            if (shouldHighlight) {
                item.classList.add('highlighted');
            } else {
                item.classList.remove('highlighted');
            }
        });
    }


    const textInput: HTMLElement | null = document.getElementById("filter-text-input");
    textInput?.addEventListener("input", handleFilter);
</script>
<style>
    main {
        display: flex;
        flex-direction: column;
        padding: 1em;
    }
    input {

    }
    ul {
        list-style: none;
        padding-left: 0;
        display: flex;
        flex-wrap: wrap;
    }
    li {
        background-color: darkslategray;
        border-radius: 1em;
        padding: 0 1em 0 1em;
        margin: 0.5em;
    }

    .highlighted {
        background-color: #111111;
    }
</style>

